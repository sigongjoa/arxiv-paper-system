import logging\nimport os\nimport sys\nfrom datetime import datetime\n\n# 기존 시스템 경로 추가\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\n\nfrom automation import EmailService, PdfGenerator\nfrom backend.core.llm_summarizer import LLMSummarizer\nfrom arxiv_crawler import ArxivCrawler\nfrom database import PaperDatabase\nfrom categories import COMPUTER_CATEGORIES, MATH_CATEGORIES, PHYSICS_CATEGORIES\n\n# 로깅 설정\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\nclass SimplifiedNewsletterService:\n    def __init__(self):\n        # 서비스 컴포넌트 초기화\n        self.email_service = EmailService(aws_region=os.getenv('AWS_REGION', 'us-east-1'))\n        self.pdf_generator = PdfGenerator()\n        self.llm_summarizer = LLMSummarizer()\n        self.crawler = ArxivCrawler()\n        self.db = PaperDatabase()\n        \n        logger.info(\"DEBUG: SimplifiedNewsletterService initialized\")\n    \n    def collect_and_summarize_papers(self, categories, days_back=1, max_papers=10):\n        \"\"\"논문 수집 및 요약\"\"\"\n        from datetime import timedelta\n        \n        end_date = datetime.now()\n        start_date = end_date - timedelta(days=days_back)\n        \n        logger.info(f\"DEBUG: Collecting papers from {start_date.date()} to {end_date.date()}\")\n        \n        papers_with_summaries = []\n        paper_count = 0\n        \n        try:\n            for paper in self.crawler.crawl_papers(categories, start_date, end_date):\n                if paper_count >= max_papers:\n                    break\n                    \n                try:\n                    # Paper 객체를 딕셔너리로 변환\n                    paper_dict = {\n                        'arxiv_id': paper.arxiv_id,\n                        'title': paper.title,\n                        'abstract': paper.abstract,\n                        'authors': paper.authors,\n                        'categories': paper.categories,\n                        'pdf_url': paper.pdf_url\n                    }\n                    \n                    # LLM 요약 생성\n                    logger.info(f\"DEBUG: Generating summary for {paper.arxiv_id}\")\n                    summary = self.llm_summarizer.summarize_paper(paper_dict)\n                    paper_dict['summary'] = summary\n                    \n                    papers_with_summaries.append(paper_dict)\n                    paper_count += 1\n                    \n                    # DB에 저장\n                    self.db.save_paper(paper)\n                    \n                except Exception as e:\n                    logger.error(f\"ERROR: Failed to process paper {paper.arxiv_id}: {str(e)}\")\n                    continue\n                    \n        except Exception as e:\n            logger.error(f\"ERROR: Failed to crawl papers: {str(e)}\", exc_info=True)\n            raise\n        \n        logger.info(f\"DEBUG: Collected and summarized {len(papers_with_summaries)} papers\")\n        return papers_with_summaries\n    \n    def generate_newsletter_content(self, papers, title=\"arXiv Newsletter\"):\n        \"\"\"뉴스레터 HTML/텍스트 콘텐츠 생성\"\"\"\n        date_str = datetime.now().strftime('%Y-%m-%d')\n        \n        html_content = f\"\"\"\n        <h1>{title}</h1>\n        <p><strong>Date:</strong> {date_str}</p>\n        <p><strong>Papers:</strong> {len(papers)} new papers</p>\n        <hr>\n        \"\"\"\n        \n        text_content = f\"{title}\\nDate: {date_str}\\nPapers: {len(papers)} new papers\\n\" + \"=\"*50 + \"\\n\\n\"\n        \n        for i, paper in enumerate(papers, 1):\n            # HTML 버전\n            html_content += f\"\"\"\n            <div style=\"margin-bottom: 30px; padding: 15px; border-left: 3px solid #007acc;\">\n                <h3>{i}. {paper.get('title', 'No Title')}</h3>\n                <p><strong>Authors:</strong> {', '.join(paper.get('authors', [])[:3])}\n                {'...' if len(paper.get('authors', [])) > 3 else ''}</p>\n                <p><strong>Categories:</strong> {', '.join(paper.get('categories', []))}</p>\n                <p><strong>arXiv ID:</strong> {paper.get('arxiv_id', 'N/A')}</p>\n                <p><strong>Summary:</strong> {paper.get('summary', 'No summary available')}</p>\n                <p><a href=\"{paper.get('pdf_url', '#')}\" target=\"_blank\">View PDF</a></p>\n            </div>\n            \"\"\"\n            \n            # 텍스트 버전\n            text_content += f\"{i}. {paper.get('title', 'No Title')}\\n\"\n            text_content += f\"Authors: {', '.join(paper.get('authors', [])[:3])}\\n\"\n            text_content += f\"Categories: {', '.join(paper.get('categories', []))}\\n\"\n            text_content += f\"arXiv ID: {paper.get('arxiv_id', 'N/A')}\\n\"\n            text_content += f\"Summary: {paper.get('summary', 'No summary available')}\\n\"\n            text_content += f\"PDF: {paper.get('pdf_url', '#')}\\n\"\n            text_content += \"-\"*30 + \"\\n\\n\"\n        \n        return html_content, text_content\n    \n    def create_and_send_newsletter(self, \n                                 recipients, \n                                 categories, \n                                 days_back=1, \n                                 max_papers=10,\n                                 sender_email=\"newsletter@example.com\"):\n        \"\"\"완전한 뉴스레터 생성 및 전송\"\"\"\n        \n        # 1. 논문 수집 및 요약\n        papers = self.collect_and_summarize_papers(categories, days_back, max_papers)\n        \n        if not papers:\n            logger.warning(\"DEBUG: No papers found for newsletter\")\n            return {'success': False, 'message': 'No papers found'}\n        \n        # 2. 콘텐츠 생성\n        html_content, text_content = self.generate_newsletter_content(papers)\n        \n        # 3. PDF 생성\n        try:\n            pdf_bytes = self.pdf_generator.generate_from_papers(papers)\n            logger.info(f\"DEBUG: PDF generated, size: {len(pdf_bytes)} bytes\")\n        except Exception as e:\n            logger.error(f\"ERROR: PDF generation failed: {str(e)}\")\n            pdf_bytes = None\n        \n        # 4. 이메일 전송\n        try:\n            subject = f\"arXiv Newsletter - {datetime.now().strftime('%Y-%m-%d')}\"\n            \n            result = self.email_service.send_newsletter(\n                subject=subject,\n                html_content=html_content,\n                text_content=text_content,\n                recipients=recipients,\n                sender_email=sender_email,\n                pdf_attachment=pdf_bytes,\n                pdf_filename=f\"arxiv_newsletter_{datetime.now().strftime('%Y%m%d')}.pdf\"\n            )\n            \n            logger.info(f\"DEBUG: Newsletter sent successfully: {result}\")\n            return {'success': True, 'result': result, 'papers_count': len(papers)}\n            \n        except Exception as e:\n            logger.error(f\"ERROR: Email sending failed: {str(e)}\", exc_info=True)\n            return {'success': False, 'error': str(e)}\n\ndef main():\n    service = SimplifiedNewsletterService()\n    \n    print(\"=== arXiv Newsletter Automation System ===\")\n    print(\"1. Generate Computer Science Newsletter\")\n    print(\"2. Generate Math Newsletter\")\n    print(\"3. Generate Physics Newsletter\")\n    print(\"4. Test Newsletter Generation (No Email)\")\n    print(\"5. Collect and Show Papers Only\")\n    \n    choice = input(\"Select option (1-5): \").strip()\n    \n    if choice == '1':\n        recipients = input(\"Recipients (comma-separated): \").strip().split(',')\n        recipients = [r.strip() for r in recipients if r.strip()]\n        sender = input(\"Sender email: \").strip() or \"newsletter@example.com\"\n        \n        result = service.create_and_send_newsletter(\n            recipients=recipients,\n            categories=COMPUTER_CATEGORIES[:5],  # 처음 5개 카테고리만\n            sender_email=sender\n        )\n        print(f\"Result: {result}\")\n    \n    elif choice == '2':\n        recipients = input(\"Recipients (comma-separated): \").strip().split(',')\n        recipients = [r.strip() for r in recipients if r.strip()]\n        sender = input(\"Sender email: \").strip() or \"newsletter@example.com\"\n        \n        result = service.create_and_send_newsletter(\n            recipients=recipients,\n            categories=MATH_CATEGORIES[:5],\n            sender_email=sender\n        )\n        print(f\"Result: {result}\")\n    \n    elif choice == '3':\n        recipients = input(\"Recipients (comma-separated): \").strip().split(',')\n        recipients = [r.strip() for r in recipients if r.strip()]\n        sender = input(\"Sender email: \").strip() or \"newsletter@example.com\"\n        \n        result = service.create_and_send_newsletter(\n            recipients=recipients,\n            categories=PHYSICS_CATEGORIES[:5],\n            sender_email=sender\n        )\n        print(f\"Result: {result}\")\n    \n    elif choice == '4':\n        # 테스트 모드 - 이메일 전송 없이 콘텐츠만 생성\n        papers = service.collect_and_summarize_papers(COMPUTER_CATEGORIES[:3], max_papers=5)\n        \n        if papers:\n            html_content, text_content = service.generate_newsletter_content(papers)\n            print(f\"\\n=== Generated Newsletter Content ===\")\n            print(f\"Papers found: {len(papers)}\")\n            print(f\"HTML content length: {len(html_content)}\")\n            print(f\"Text content preview:\\n{text_content[:500]}...\")\n            \n            # PDF 생성 테스트\n            try:\n                pdf_bytes = service.pdf_generator.generate_from_papers(papers)\n                print(f\"PDF generated successfully, size: {len(pdf_bytes)} bytes\")\n            except Exception as e:\n                print(f\"PDF generation failed: {e}\")\n        else:\n            print(\"No papers found for test\")\n    \n    elif choice == '5':\n        domain = input(\"Domain (computer/math/physics): \").strip().lower()\n        max_papers = int(input(\"Max papers (default 10): \") or 10)\n        \n        if domain == 'computer':\n            categories = COMPUTER_CATEGORIES[:5]\n        elif domain == 'math':\n            categories = MATH_CATEGORIES[:5]\n        elif domain == 'physics':\n            categories = PHYSICS_CATEGORIES[:5]\n        else:\n            categories = COMPUTER_CATEGORIES[:3]\n        \n        papers = service.collect_and_summarize_papers(categories, max_papers=max_papers)\n        \n        print(f\"\\n=== Collected {len(papers)} Papers ===\")\n        for i, paper in enumerate(papers, 1):\n            print(f\"\\n{i}. {paper['title']}\")\n            print(f\"   arXiv ID: {paper['arxiv_id']}\")\n            print(f\"   Authors: {', '.join(paper['authors'][:2])}{'...' if len(paper['authors']) > 2 else ''}\")\n            print(f\"   Categories: {', '.join(paper['categories'])}\")\n            print(f\"   Summary: {paper.get('summary', 'No summary')[:100]}...\")\n\nif __name__ == \"__main__\":\n    main()\n